# This is a basic workflow to help you get started with Actions

name: IotHub Infrastructure Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "deploy" job creates the required Azure infrastructure
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      LOCATION: westeurope
      AKS_RG_NAME: rg-aks-demo
      K3S_RG_NAME: rg-k3s-demo

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create SSH key pair
        run: | 
          echo
          echo Creating SSH key pair for K8s hosts ...
          echo
          ./scripts/create_ssh_key_pair.sh

      - name: Save SSH public key
        uses: actions/upload-artifact@v2
        with:
          name: SSH-public-key
          path: ./local/.ssh/id_rsa.pub

      - name: Save SSH private key
        uses: actions/upload-artifact@v2
        with:
          name: SSH-private-key
          path: ./local/.ssh/id_rsa

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create AKS/K3s/IotHub Infrastructure
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo
            echo Printing general info about the Az CLI shell ...
            echo
            echo Current directory:
            pwd
            echo
            echo GITHUB_WORKSPACE:
            echo ${GITHUB_WORKSPACE}
            echo
            echo ${GITHUB_WORKSPACE}:
            ls -al
            echo
            echo ${GITHUB_WORKSPACE}/local/.ssh:
            ls -al ./local/.ssh
            echo
            echo User context:
            whoami
            echo
            echo Home directory:
            echo ${HOME}
            echo
            echo Disks:
            df

            # Overwrite environment variable with locally created keys.
            #export SSH_RSA_PUBLIC_KEY=$(cat ./local/.ssh/id_rsa.pub)

            # Create cloud init script URI.
            export CLOUD_INIT_SCRIPT_URI=https://raw.githubusercontent.com/${GITHUB_ACTOR}/Hybrid.IoTHub.Deployment/main/deployment/bicep/modules/create_cloud_init_input_string_bicep.sh
            
            # Set local repo root.
            export LOCAL_REPO_ROOT=${GITHUB_WORKSPACE}

            echo
            echo Environment variables:
            env

            echo
            echo Creating Azure resources ...
            echo
            az deployment sub create \
              --name AKS_IoT_K3S_deploy \
              --location ${LOCATION} \
              --template-file ${LOCAL_REPO_ROOT}/deployment/bicep/main.bicep \
              --parameters resourceGroupName=${AKS_RG_NAME} \
                           onpremResourceGroupName=${K3S_RG_NAME} \
                           environmentType=dev \
                           aksDeployment=yes \
                           iotDeployment=yes \
                           vmDeployment=yes \
                           aksClientId=${AKS_CLIENT_ID} \
                           aksClientSecret=${AKS_CLIENT_SECRET} \
                           fileShareType=SMB \
                           dpsDeployment=no \
                           cloudInitScriptUri=${CLOUD_INIT_SCRIPT_URI} \
                           sshRSAPublicKey=\"${SSH_RSA_PUBLIC_KEY}\"

            echo
            echo Saving Bicep deployment outputs ...
            echo
            az deployment sub show \
              --name AKS_IoT_K3S_deploy \
              --query properties.outputs > ./local/deployment-output.txt
        env:
          AKS_CLIENT_ID: ${{ secrets.AKS_CLIENT_ID }}
          AKS_CLIENT_SECRET : ${{ secrets.AKS_CLIENT_SECRET }}
          SSH_RSA_PUBLIC_KEY: ${{ secrets.SSH_RSA_PUBLIC_KEY }}

      # Save Bicep output for later reference
      - name: Save Bicep output
        uses: actions/upload-artifact@v2
        with:
          name: bicep-output
          path: ./local/deployment-output.txt

  # The "configure" job sets up Argo CD for initial use
  configure:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download bicep artifact
        uses: actions/download-artifact@v2
        with:
          name: bicep-output

      - name: Download SSH artifact
        uses: actions/download-artifact@v2
        with:
          name: SSH-private-key

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure SSH
        run: |
          echo
          lsb_release -a
          echo
          echo Printing general info about runner shell ...
          echo
          echo Current directory:
          pwd
          echo
          echo GITHUB_WORKSPACE:
          echo ${GITHUB_WORKSPACE}
          echo
          echo ${GITHUB_WORKSPACE}:
          ls -al
          echo
          echo id_rsa:
          cat ./id_rsa
          echo
          echo User context:
          whoami
          echo
          echo Home directory:
          echo ${HOME}
          echo
          echo ${HOME}:
          ls -al ${HOME}
          echo
          echo Disks:
          df
          echo
          echo Environment variables:
          env

          echo
          echo Creating SSH infrastructure ...
          mkdir -p local
          mkdir -p local/.ssh
          chmod 700 local/.ssh
          echo -e ${SSH_RSA_PRIVATE_KEY} > ./local/.ssh/id_rsa
          #mv ./id_rsa ./local/.ssh/id_rsa
          chmod 600 ./local/.ssh/id_rsa
          mkdir -p ${HOME}/.ssh
          touch ${HOME}/.ssh/known_hosts
          chmod 600 ${HOME}/.ssh/known_hosts

          echo Verifying SSH directories ...
          echo ./local/.ssh:
          ls -al ./local/.ssh
          echo
          echo ${HOME}/.ssh:
          ls -al ${HOME}/.ssh
        env:
          SSH_RSA_PRIVATE_KEY: ${{ secrets.SSH_RSA_PRIVATE_KEY }}

      - name: Download K3s and AKS kubeconfig
        run: |
          echo
          echo Configuring K3s prerequisites ...
          export KUBECONFIG_DIR=${HOME}/.kube
          export K3S_HOST=$(cat deployment-output.txt | jq -r '.fqdn.value')
          mkdir -p ${KUBECONFIG_DIR}

          echo Verifying kubernetes settings ...
          echo KUBECONFIG_DIR:
          echo ${KUBECONFIG_DIR}
          echo
          echo K3S_HOST:
          echo ${K3S_HOST}
          echo
          echo ${HOME}:
          ls -al ${HOME}
      
          echo
          echo Downloading kubeconfig from K3s host and from AKS ...
          ./scripts/download_kubeconfig.sh

          echo
          echo Verifying download ...
          echo ${KUBECONFIG_DIR}:
          ls -al ${KUBECONFIG_DIR}
          echo
          echo Downloaded kubeconfig:
          echo
          cat ${KUBECONFIG_DIR}/config

          echo
          echo Copying kubeconfig back to GITHUB_WORKSPACE for easy access when creating artifacts ...
          cp ${KUBECONFIG_DIR}/config ${GITHUB_WORKSPACE}/local/config
          chmod 644 ${GITHUB_WORKSPACE}/local/config
          chmod 644 ${GITHUB_WORKSPACE}/local/node-token

      - name: Save kubeconfig
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig
          path: ./local/config

      - name: Save node token
        uses: actions/upload-artifact@v2
        with:
          name: node-token
          path: ./local/node-token

      - name: Install kubectl
        run: | 
          echo Downloading latest kubectl release ...
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          
          echo
          echo Downloading kubectl checksum file ...
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"

          echo
          echo ${GITHUB_WORKSPACE}:
          ls -al 

          echo
          echo Validating kubectl against checksum file ...
          echo "$(<kubectl.sha256) kubectl" | sha256sum -c

          echo Installing kubectl binary ...
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

          echo Verifying installed version ...
          kubectl version --client

          export KUBECONFIG_DIR=${HOME}/.kube
          echo
          echo ${KUBECONFIG_DIR}:
          ls -al ${KUBECONFIG_DIR}

          echo
          echo Verifying K3s cluster ...
          kubectl config use-context default
          kubectl cluster-info

      - name: Install Argo CD CLI
        run: | 
          echo Installing Argo CD CLI ...
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd

      - name: Install sample app and add AKS cluster
        run: |
          # Ignore non-zero exit from configure_argocd.sh
          set +e
          echo Configuring Argo CD for first time use ...
          export K3S_HOST=$(cat deployment-output.txt | jq -r '.fqdn.value')
          echo
          echo K3s host:
          echo ${K3S_HOST}
          echo
          ./scripts/configure_argocd.sh
        env:
          ARGOCD_PWD: ${{ secrets.ARGOCD_PWD }}

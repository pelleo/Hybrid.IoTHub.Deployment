# This is a basic workflow to help you get started with Actions

name: IotHub Infrastructure Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "deploy" job creates the required Azure infrastructure
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      LOCATION: westeurope
      RESOURCE_GROUP_NAME: rg-aks-demo
      ONPREM_RESOURCE_GROUP_NAME: rg-k3s-demo
      ENVIRONMENT_TYPE: dev
      AKS_DEPLOYMENT: yes
      IOT_DEPLOYMENT: yes
      VM_DEPLOYMENT: yes
      DPS_DEPLOYMENT: no
      FILE_SHARE_TYPE: SMB

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      # Print some basic information about the runners shell
      - name: Show configuration of runners shell
        run: |
          echo Current directory:
          pwd
          echo
          echo Directory listing:
          ls -al
          echo
          echo Workspace location:
          echo ${RUNNER_WORKSPACE}
          echo
          echo User context:
          whoami
          echo
          echo Disks:
          df
          echo
          echo Environment variables:
          env
        
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create the Azure infrastructure
      - name: Create AKS/K3s/IotHub Infrastructure
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az deployment sub create \
              --name AKS_IoT_K3S_deploy \
              --location $LOCATION \
              --template-file $GITHUB_WORKSPACE/deployment/bicep/main.bicep \
              --parameters resourceGroupName=$RESOURCE_GROUP_NAME \
                           onpremResourceGroupName=$ONPREM_RESOURCE_GROUP_NAME \
                           environmentType=$ENVIRONMENT_TYPE \
                           aksDeployment=$AKS_DEPLOYMENT \
                           iotDeployment=$IOT_DEPLOYMENT \
                           vmDeployment=$VM_DEPLOYMENT \
                           aksClientId=${{ secrets.AKS_CLIENT_ID }} \
                           aksClientSecret=${{ secrets.AKS_CLIENT_SECRET }} \
                           fileShareType=$FILE_SHARE_TYPE \
                           dpsDeployment=$DPS_DEPLOYMENT \
                           cloudInitScriptUri=${{ secrets.CLOUD_INIT_SCRIPT_URI }} \
                           sshRSAPublicKey=${{ secrets.SSH_RSA_PUBLIC_KEY }}
            
            az deployment sub show \
              --name AKS_IoT_K3S_deploy \
              --query properties.outputs > deployment-output.txt

      # Save Bicep output for later reference
      - name: Save Bicep output
        uses: actions/upload-artifact@v2
        with:
          name: bicep-output
          path: deployment-output.txt

  # The "configure" job sets up Argo CD for initial use
  configure:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download bicep artifact
        uses: actions/download-artifact@v2
        with:
          name: bicep-output

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download K3s and AKS kubeconfig
        run: |
          # Print out general info about Az CLI shell.
          echo Current directory:
          pwd
          echo
          echo GITHUB_WORKSPACE:
          echo ${GITHUB_WORKSPACE}
          echo
          echo Directory listing:
          ls -al
          echo
          echo User context:
          whoami
          echo
          echo Home directory:
          echo ${HOME}
          echo
          echo Disks:
          df
          echo
          echo Environment variables:
          env

          # Create necessary SSH infrastructure.
          mkdir -p local
          mkdir -p local/.ssh
          chmod 700 local/.ssh
          echo -e ${SSH_RSA_PRIVATE_KEY} > ./local/.ssh/id_rsa
          chmod 600 ./local/.ssh/id_rsa
          mkdir -p ${HOME}/.ssh
          touch ${HOME}/.ssh/known_hosts
          chmod 600 ${HOME}/.ssh/known_hosts

          # Print out SSH configuration.
          echo
          echo List files in current directory
          pwd
          ls -al 
          echo
          echo List files in ./local/.ssh
          ls -al ./local/.ssh
          echo
          echo ${HOME}/.ssh:
          ls -al ${HOME}/.ssh

          # Configure K8s pre-reqs.
          export KUBECONFIG_DIR=${HOME}/.kube
          export K3S_HOST=$(cat deployment-output.txt | jq -r '.fqdn.value')
          mkdir -p ${KUBECONFIG_DIR}

          # Confirm settings.
          echo KUBECONFIG_DIR:
          echo ${KUBECONFIG_DIR}
          echo
          echo K3S_HOST:
          echo ${K3S_HOST}
          echo
          #echo /root:
          #ls -al /root
      
          # Download kubeconfig from K3s host and from AKS (requires SSH).
          ./scripts/download_kubeconfig.sh

          # Verify download.
          echo ${KUBECONFIG_DIR}:
          ls -al ${KUBECONFIG_DIR}
          echo
          echo Downloaded kubeconfig:
          echo
          cat ${KUBECONFIG_DIR}/config

          # Copy kubefig back to GITHUB_WORKSPACE for easy access when creating artifacts.
          cp ${KUBECONFIG_DIR}/config ${GITHUB_WORKSPACE}/local/kubeconfig
          chmod 644 ${GITHUB_WORKSPACE}/local/kubeconfig
          chmod 644 ${GITHUB_WORKSPACE}/local/node-token
        env:
          SSH_RSA_PRIVATE_KEY: ${{ secrets.SSH_RSA_PRIVATE_KEY }}

      # Save kubeconfig
      - name: Save kubeconfig
        uses: actions/upload-artifact@v2
        with:
          name: kubeconfig
          path: ./local/kubeconfig

      # Save node token
      - name: Save node token
        uses: actions/upload-artifact@v2
        with:
          name: node-token
          path: ./local/node-token

      - name: Configure Argo CD
        run: | 
          # Print out general info about Az CLI shell.
          echo Current directory:
          pwd
          echo
          echo GITHUB_WORKSPACE:
          echo ${GITHUB_WORKSPACE}
          echo
          echo Directory listing:
          ls -al
          echo
          echo User context:
          whoami
          echo
          echo Home directory:
          echo ${HOME}
          echo
          echo Directories:
          ls -al ${HOME}
          echo
          echo Disks:
          df
          echo
          echo Environment variables:
          env

          echo Downloading latest kubectl release ...
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          
          echo Downloading kubectl checksum file ...
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"

          echo Listing files in ${GITHUB_WORKSPACE} ...
          ls -al 

          echo Validating kubectl against checksum file ...
          #echo "$(<kubectl.sha256) kubectl" | sha256sum -c

          echo Installing kubectl binary ...
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

          echo Verifying installed version ...
          kubectl version --client
